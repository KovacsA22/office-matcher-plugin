{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack:///./src/taskpane/taskpane.js?"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global console, document, Excel, Office */\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\n    document.getElementById(\"app-body\").style.display = \"flex\";\n    document.getElementById(\"run\").onclick = () => run();\n    document.getElementById(\"fill\").onclick = () => fillFromSelection();\n    document.getElementById(\"select-words\").onclick = () => load(\"words-start\");\n    document.getElementById(\"select-texts\").onclick = () => load(\"texts-start\");\n    document.getElementById(\"select-results\").onclick = () => load(\"results-start\");\n    document.getElementById(\"select-delimiter\").onclick = () => load(\"delimiter-cell\");\n\n\n  }\n});\n\nlet delimiter=\"\", wordArray=[], textArray=[], wordCount, textCount, resultAddress;\n\n\nasync function fillFromSelection(){\n  try {\n    await Excel.run(async (context) => {\n      const range = context.workbook.getSelectedRange();\n      range.load(\"values\");\n      await context.sync();\n\n      document.getElementById(\"words-start\").value=range.values[0][0];\n      document.getElementById(\"texts-start\").value=range.values[1][0];\n      document.getElementById(\"delimiter-cell\").value=range.values[2][0];\n      document.getElementById(\"results-start\").value=range.values[3][0];\n\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nasync function load(targetId){\n  try {\n    await Excel.run(async (context) => {\n      let range = context.workbook.getSelectedRange();\n      \n      range.load(\"address\");\n      await context.sync();\n      document.getElementById(targetId).value=range.address;\n      \n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nfunction getRangeById(context, id){\n  const element = document.getElementById(id).value;\n  return context.workbook.worksheets.getActiveWorksheet().getRange(element);\n}\n\nasync function processInputs(context){\n  // WORDS\n  {\n    let wordRange = getRangeById(context,\"words-start\");\n        \n    // Read the range address\n    wordRange.load(\"columnIndex\");\n    await context.sync();\n    \n    const top = context.workbook.worksheets.getActiveWorksheet().getCell(0,wordRange.columnIndex);\n\n    top.load(\"values\");\n    await context.sync();\n\n    wordCount = top.values[0][0];\n    document.getElementById(\"word-count\").innerText = wordCount + \" db\";\n\n    wordRange = wordRange.getResizedRange(wordCount-1,0);\n    //wordRange.select();\n    \n    wordRange.load(\"values\");\n    await context.sync();\n    wordArray=[];\n    for(const word of wordRange.values){\n      wordArray.push(word[0].toString().toLowerCase());\n    }\n  }  \n  //TEXTS\n    {\n    let textRange = getRangeById(context, \"texts-start\");\n\n    // Read the range address\n    textRange.load(\"columnIndex\");\n    await context.sync();\n\n    const top = context.workbook.worksheets.getActiveWorksheet().getCell(0,textRange.columnIndex);\n\n    top.load(\"values\");\n    await context.sync();\n\n    textCount = top.values[0][0];\n    document.getElementById(\"text-count\").innerText = textCount + \" db\";\n\n    textRange = textRange.getResizedRange(textCount-1,0);\n    //textRange.select();\n\n    textRange.load(\"values\");\n\n    await context.sync();\n    textArray=[];\n    for(const text of textRange.values){\n      textArray.push(text[0].toString().toLowerCase());\n    }\n  }\n  // RESULTS\n\n  resultAddress = document.getElementById(\"results-start\").value;\n\n  // DELIMITER\n\n  {\n    var delimiterRange = getRangeById(context, \"delimiter-cell\");\n    //let delimiterRange = context.workbook.worksheets.getActiveWorksheet().getRange(document.getElementById(\"delimiter-cell\").value.toString());\n    //let delimiterRange=context.workbook.worksheets.getItem(\"Sheet1\").getRange(\"G4:G4\");\n    delimiterRange.load(\"values\");\n    await context.sync();\n\n    \n    delimiter=delimiterRange.values[0][0];\n    document.getElementById(\"delimiter\").innerText = \"\\\"\"+delimiter+\"\\\"\";\n  }\n}\n\nasync function run() {\n  try {\n    await Excel.run(async (context) => {\n      document.getElementById(\"run-text\").innerText=\"Futtat√°s...\";\n      await processInputs(context);\n      const rootCell = context.workbook.worksheets.getActiveWorksheet().getRange(resultAddress);\n      let activeCell = rootCell;\n\n      await runSingleCounter(activeCell);\n      activeCell=rootCell.getOffsetRange(0,2);\n      await runPairsCounter(activeCell);\n      activeCell=rootCell.getOffsetRange(0,6);\n      await runCountTags(activeCell);\n      activeCell=rootCell.getOffsetRange(0,8);\n      await runCreateHistogram(activeCell);\n      activeCell=rootCell.getOffsetRange(0,11);\n      await runCreateMatchHistogram(activeCell);\n\n\n      document.getElementById(\"run-text\").innerText=\"Futtat√°s\";\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n\nasync function runSingleCounter(resultRange) {\n  try {\n      const occurences = [];\n      for(const word of wordArray){\n        let occurence = 0;\n        for(const text of textArray){\n          //occurence += text[0].split(word[0]).length - 1;\n          //occurence += (text[0].match(new RegExp(word[0],\"gi\")) || []).length;\n          //occurence += (text[0].match(new RegExp(word[0],\"gi\")) || []).length>0?1:0;\n          occurence += text.includes(word);\n          continue;\n        }\n        occurences.push(occurence);\n      }\n      console.log(occurences);\n\n      //let resultRange = context.workbook.worksheets.getActiveWorksheet().getRange(resultAddress);\n      resultRange=resultRange.getResizedRange(occurences.length-1,0);\n      //resultRange.select();\n      resultRange.values=[];\n      for(const occurence of occurences){\n        resultRange.values.push([occurence]);\n      }\n      //await context.sync();\n\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n\nasync function runPairsCounter(resultRange) {\n  try {\n\n      const occurences = {};\n        for(i=0;i<wordArray.length-1;i++){\n          for(j=i+1;j<wordArray.length;j++){\n            for(const text of textArray){\n            if(text.includes(wordArray[i]) && text.includes(wordArray[j])){\n              if(occurences[i+\"x\"+j]==undefined){\n                occurences[i+\"x\"+j]=0;\n              }\n              occurences[i+\"x\"+j]+=1;\n            }\n          }\n        }\n      }\n\n      console.log(occurences);\n\n      //let resultRange = context.workbook.worksheets.getActiveWorksheet().getRange(resultAddress);\n      resultRange=resultRange.getResizedRange(Object.keys(occurences).length-1,2);\n      //resultRange.select();\n      resultRange.values=[];\n      for(const key in occurences){\n        const keys = key.split(\"x\");\n        resultRange.values.push([parseInt(keys[0])+1,parseInt(keys[1])+1,occurences[key]]);\n      }\n      \n  } catch (error) {\n    console.error(error);\n  }\n}\n\nString.prototype.count = function(search) {\n  var m = this.match(new RegExp(search.toString().replace(/(?=[.\\\\+*?[^\\]$(){}\\|])/g, \"\\\\\"), \"gi\"));\n  return m ? m.length:0;\n}\n\nasync function runCountTags(resultRange) {\n  try {\n\n\n      const occurences = [];\n      for(const text of textArray){\n        const array = text.split(delimiter);\n        if(array.length==1 && array[0]==\"\"){\n          occurences.push(0);\n        }else{\n          const occurence = text.split(delimiter).length;\n          occurences.push(occurence);\n        }\n      }\n\n      console.log(occurences);\n\n      //let resultRange = context.workbook.worksheets.getActiveWorksheet().getRange(resultAddress);\n      resultRange=resultRange.getResizedRange(occurences.length-1,0);\n      //resultRange.select();\n      resultRange.values=[];\n      for(const occurence of occurences){\n        resultRange.values.push([occurence]);\n      }\n\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n\nasync function runCreateHistogram(resultRange) {\n  try {\n\n      let maxTagCount=0;\n      const tagCounts = {};\n      for(const text of textArray){\n        const array = text.split(delimiter);\n        let tagCount=0;\n        if(array.length !=1 || array[0] != \"\"){\n          tagCount = text.split(delimiter).length;\n        }\n        if(tagCount>maxTagCount){\n          maxTagCount=tagCount;\n        }\n        if(tagCounts[tagCount+\"\"] == undefined){\n          tagCounts[tagCount+\"\"] = 0;\n        }\n        tagCounts[tagCount+\"\"] += 1;\n        \n      }\n\n      console.log(tagCounts);\n\n      //let resultRange = context.workbook.worksheets.getActiveWorksheet().getRange(resultAddress);\n      resultRange=resultRange.getResizedRange(maxTagCount,1);\n      //resultRange.select();\n      resultRange.values=[];\n      for(i=0;i<=maxTagCount;i++){\n        resultRange.values.push([i,tagCounts[i+\"\"]==undefined?0:tagCounts[i+\"\"]]);\n      }\n\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n\nasync function runCreateMatchHistogram(resultRange) {\n  try {\n\n        const occurences = [];\n        for(const text of textArray){\n          let occurence = 0;\n          for(const word of wordArray){\n            occurence += text.count(word);//(text.match(new RegExp(word,\"gi\")) || []).length;\n          }\n          occurences.push(occurence);\n          //occurences.push(occurence);\n        }\n\n        console.log(occurences);\n\n        //let resultRange = context.workbook.worksheets.getActiveWorksheet().getRange(resultAddress);\n        resultRange=resultRange.getResizedRange(occurences.length,1);\n        //resultRange.select();\n        resultRange.values=[];\n        for(i=0;i<=occurences.length;i++){\n          resultRange.values.push([i+1,occurences[i]==undefined?0:occurences[i]]);\n        }\n        /*for(const occurence in occurences){\n          resultRange.values.push([occurence,occurences[occurence]]);\n        }*/\n\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n\n\n"],"names":["Office","onReady","info","host","HostType","Excel","document","getElementById","style","display","onclick","run","fillFromSelection","load","wordCount","textCount","resultAddress","delimiter","wordArray","textArray","context","range","workbook","getSelectedRange","sync","value","values","console","error","targetId","address","getRangeById","id","element","worksheets","getActiveWorksheet","getRange","processInputs","wordRange","top","getCell","columnIndex","innerText","getResizedRange","word","push","toString","toLowerCase","textRange","text","delimiterRange","rootCell","activeCell","runSingleCounter","getOffsetRange","runPairsCounter","runCountTags","runCreateHistogram","runCreateMatchHistogram","resultRange","occurences","occurence","includes","log","length","i","j","undefined","key","Object","keys","split","parseInt","array","maxTagCount","tagCounts","tagCount","count","String","prototype","search","m","this","match","RegExp","replace"],"sourceRoot":""}