{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack:///./src/taskpane/taskpane.js?"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n\r\n/* global console, document, Excel, Office */\r\n\r\nOffice.onReady((info) => {\r\n  if (info.host === Office.HostType.Excel) {\r\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\r\n    document.getElementById(\"app-body\").style.display = \"flex\";\r\n    document.getElementById(\"run\").onclick = () => run();\r\n    document.getElementById(\"fill\").onclick = () => fillFromSelection();\r\n    document.getElementById(\"delete-output\").onclick = () => deleteOutput();\r\n    document.getElementById(\"select-words\").onclick = () => load(\"words-start\");\r\n    document.getElementById(\"select-texts\").onclick = () => load(\"texts-start\");\r\n    document.getElementById(\"select-results\").onclick = () => load(\"results-start\");\r\n    document.getElementById(\"select-delimiter\").onclick = () => load(\"delimiter-cell\");\r\n\r\n\r\n  }\r\n});\r\n\r\nlet delimiter=\"\", wordArray=[], textArray=[], wordCount, textCount, resultAddress;\r\n\r\n\r\nasync function fillFromSelection(){\r\n  try {\r\n    await Excel.run(async (context) => {\r\n      const range = context.workbook.getSelectedRange();\r\n      range.load(\"values\");\r\n      await context.sync();\r\n\r\n      document.getElementById(\"words-start\").value=range.values[0][0];\r\n      document.getElementById(\"texts-start\").value=range.values[1][0];\r\n      document.getElementById(\"delimiter-cell\").value=range.values[2][0];\r\n      document.getElementById(\"results-start\").value=range.values[3][0];\r\n\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\nasync function load(targetId){\r\n  try {\r\n    await Excel.run(async (context) => {\r\n      let range = context.workbook.getSelectedRange();\r\n      \r\n      range.load(\"address\");\r\n      await context.sync();\r\n      document.getElementById(targetId).value=range.address;\r\n      \r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\n\r\nfunction getRange(context, address){\r\n  const parts = address.split(\"!\");\r\n  const worksheet = parts[0];\r\n  const cells = parts[1];\r\n  return context.workbook.worksheets.getItem(worksheet).getRange(cells);\r\n}\r\n\r\nfunction getRangeById(context, id){\r\n  const value = document.getElementById(id).value;\r\n  return getRange(context, value);\r\n}\r\n\r\n\r\n\r\nasync function processInputs(context){\r\n  // WORDS\r\n  {\r\n    let wordRange = getRangeById(context,\"words-start\");\r\n        \r\n    // Read the range address\r\n    wordRange.load(\"rowIndex\");\r\n    await context.sync();\r\n    \r\n    const top = wordRange.getOffsetRange(-wordRange.rowIndex,0);\r\n    //const top = context.workbook.worksheets.getActiveWorksheet().getCell(0,wordRange.columnIndex);\r\n\r\n    top.load(\"values\");\r\n    await context.sync();\r\n\r\n    wordCount = top.values[0][0];\r\n    document.getElementById(\"word-count\").innerText = wordCount + \" db\";\r\n\r\n    wordRange = wordRange.getResizedRange(wordCount-1,0);\r\n    //wordRange.select();\r\n    \r\n    wordRange.load(\"values\");\r\n    await context.sync();\r\n    wordArray=[];\r\n    for(const word of wordRange.values){\r\n      wordArray.push(word[0].toString().toLowerCase());\r\n    }\r\n  }  \r\n  //TEXTS\r\n    {\r\n    let textRange = getRangeById(context, \"texts-start\");\r\n\r\n    // Read the range address\r\n    textRange.load(\"rowIndex\");\r\n    await context.sync();\r\n    const top = textRange.getOffsetRange(-textRange.rowIndex,0);\r\n    //const top = context.workbook.worksheets.getActiveWorksheet().getCell(0,textRange.columnIndex);\r\n\r\n    top.load(\"values\");\r\n    await context.sync();\r\n\r\n    textCount = top.values[0][0];\r\n    document.getElementById(\"text-count\").innerText = textCount + \" db\";\r\n\r\n    textRange = textRange.getResizedRange(textCount-1,0);\r\n    //textRange.select();\r\n\r\n    textRange.load(\"values\");\r\n\r\n    await context.sync();\r\n    textArray=[];\r\n    for(const text of textRange.values){\r\n      textArray.push(text[0].toString().toLowerCase());\r\n    }\r\n  }\r\n  // RESULTS\r\n\r\n  resultAddress = document.getElementById(\"results-start\").value;\r\n\r\n  // DELIMITER\r\n\r\n  {\r\n    var delimiterRange = getRangeById(context, \"delimiter-cell\");\r\n    //let delimiterRange = context.workbook.worksheets.getActiveWorksheet().getRange(document.getElementById(\"delimiter-cell\").value.toString());\r\n    //let delimiterRange=context.workbook.worksheets.getItem(\"Sheet1\").getRange(\"G4:G4\");\r\n    delimiterRange.load(\"values\");\r\n    await context.sync();\r\n\r\n    \r\n    delimiter=delimiterRange.values[0][0];\r\n    document.getElementById(\"delimiter\").innerText = \"\\\"\"+delimiter+\"\\\"\";\r\n  }\r\n}\r\n\r\nasync function deleteOutput() {\r\n  try {\r\n    await Excel.run(async (context) => {\r\n      const outputStart = getRangeById(context, \"results-start\");\r\n      const outputColumns = outputStart.getResizedRange(100000,16);\r\n      outputColumns.clear(\"Contents\");\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n    document.getElementById(\"error\").innerText=\"(Hiba: \"+error+\")\";\r\n  }\r\n}\r\nasync function run() {\r\n  try {\r\n    await Excel.run(async (context) => {\r\n      document.getElementById(\"error\").innerText=\"\";\r\n      const runButton = document.getElementById(\"run-text\");\r\n      runButton.innerText=\"Futtatás...\";\r\n      await processInputs(context);\r\n      const rootCell = getRange(context, resultAddress);\r\n\r\n\r\n      runButton.innerText=\"Futtatás... (1/8)\";\r\n      let activeCell = rootCell;\r\n      await runSingleCounter(activeCell, false);\r\n      await context.sync();\r\n\r\n\r\n      runButton.innerText=\"Futtatás... (2/8)\";\r\n      activeCell=rootCell.getOffsetRange(0,3);\r\n      await runSingleCounter(activeCell, true);\r\n      await context.sync();\r\n\r\n\r\n      runButton.innerText=\"Futtatás... (3/8)\";\r\n      activeCell=rootCell.getOffsetRange(0,6);\r\n      await runPairsCounter(activeCell);\r\n      await context.sync();\r\n\r\n\r\n      \r\n      runButton.innerText=\"Futtatás... (4/8)\";\r\n      activeCell=rootCell.getOffsetRange(0,10);\r\n      await runCountTags(activeCell);\r\n      await context.sync();\r\n\r\n\r\n      runButton.innerText=\"Futtatás... (5/8)\";\r\n      activeCell=rootCell.getOffsetRange(0,12);\r\n      await runCreateHistogram(activeCell);\r\n      await context.sync();\r\n\r\n\r\n      runButton.innerText=\"Futtatás... (6/8)\";\r\n      activeCell=rootCell.getOffsetRange(0,15);\r\n      await runCreateMatchHistogram(activeCell);\r\n      await context.sync();\r\n\r\n      runButton.innerText=\"Futtatás... (7/8)\";\r\n      activeCell=rootCell.getOffsetRange(0,18);\r\n      await runPairsCounter2(activeCell);\r\n      await context.sync();\r\n\r\n      runButton.innerText=\"Futtatás... (8/8)\";\r\n      activeCell=rootCell.getOffsetRange(0,23);\r\n      await runCountTriplets(activeCell);\r\n      await context.sync();\r\n\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n    document.getElementById(\"error\").innerText=\"(Hiba: \"+error+\")\";\r\n\r\n  }finally{\r\n    document.getElementById(\"run-text\").innerText=\"Futtatás\";\r\n\r\n  }\r\n}\r\n\r\nfunction refreshElement(element){\r\n  element.style.display=\"none\";\r\n  element.style.display=\"block\";\r\n}\r\n\r\n\r\nasync function runSingleCounter(resultRange, ordered) {\r\n      let occurences = new Map();\r\n      let total = 0;\r\n      for(const word of wordArray){\r\n        let occurence = 0;\r\n        for(const text of textArray){\r\n          //occurence += text[0].split(word[0]).length - 1;\r\n          //occurence += (text[0].match(new RegExp(word[0],\"gi\")) || []).length;\r\n          //occurence += (text[0].match(new RegExp(word[0],\"gi\")) || []).length>0?1:0;\r\n          occurence += text.includes(word);\r\n          continue;\r\n        }\r\n        occurences.set(word,occurence);\r\n        if(word != \"\")\r\n          total +=occurence;\r\n      }\r\n      console.log(occurences);\r\n      console.log(\"Total:\"+total);\r\n\r\n      if(ordered){\r\n        occurences = new Map([...occurences.entries()].sort((a, b) => b[1] - a[1]));\r\n        resultRange=resultRange.getResizedRange(occurences.size-1,2);\r\n      }else{\r\n        resultRange=resultRange.getResizedRange(occurences.size-1,1);\r\n      }\r\n\r\n      if(ordered){\r\n        occurences = new Map([...occurences.entries()].sort((a, b) => b[1] - a[1]));\r\n      }\r\n\r\n      //let resultRange = context.workbook.worksheets.getActiveWorksheet().getRange(resultAddress);\r\n      //resultRange=resultRange.getResizedRange(occurences.size-1,1);\r\n      //resultRange.select();\r\n      resultRange.values=[];\r\n      let sum=0;\r\n      for(const [word,count] of occurences){\r\n        if(ordered){\r\n          if(word == \"\"){\r\n            resultRange.values.push([word,count,\"\"]);\r\n          }else{\r\n            sum += count;\r\n            let relativesum = sum/total;\r\n            resultRange.values.push([word,count,relativesum]);\r\n          }\r\n        }else{\r\n          resultRange.values.push([word,count]);\r\n        }\r\n      }\r\n      //await context.sync();\r\n\r\n}\r\n\r\n\r\nasync function runPairsCounter(resultRange) {\r\n      const occurences = {};\r\n      for(i=0;i<wordArray.length-1;i++){\r\n        for(j=i+1;j<wordArray.length;j++){\r\n          for(const text of textArray){\r\n            if(text.includes(wordArray[i]) && text.includes(wordArray[j])){\r\n              if(occurences[i+\"x\"+j]==undefined){\r\n                occurences[i+\"x\"+j]=0;\r\n              }\r\n              occurences[i+\"x\"+j]+=1;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      console.log(occurences);\r\n\r\n      //let resultRange = context.workbook.worksheets.getActiveWorksheet().getRange(resultAddress);\r\n      resultRange=resultRange.getResizedRange(Object.keys(occurences).length-1,2);\r\n      //resultRange.select();\r\n      resultRange.values=[];\r\n      for(const key in occurences){\r\n        const keys = key.split(\"x\");\r\n        resultRange.values.push([parseInt(keys[0])+1,parseInt(keys[1])+1,occurences[key]]);\r\n      }\r\n\r\n}\r\n\r\n\r\nasync function runPairsCounter2(resultRange) {\r\n\r\n  console.log(\"runPairsCounter2\");\r\n  let occurenceMap = new Map();\r\n  for(const word of wordArray){\r\n    let occurence = 0;\r\n    for(const text of textArray){\r\n      occurence += text.includes(word);\r\n      continue;\r\n    }\r\n    occurenceMap.set(word,occurence);\r\n  }\r\n\r\n  occurenceMap = new Map([...occurenceMap.entries()].sort((a, b) => b[1] - a[1]));\r\n  const orderedWords = [...occurenceMap.keys()];\r\n\r\n  console.log(orderedWords);\r\n\r\n  const result={};\r\n  for(i=0;i<orderedWords.length;i++){\r\n    for(j=0;j<orderedWords.length;j++){\r\n      if(i==j){\r\n        continue;\r\n      }\r\n      for(const text of textArray){\r\n        if(text.includes(orderedWords[i]) && text.includes(orderedWords[j])){\r\n          if(result[orderedWords[i]] == undefined){\r\n            result[orderedWords[i]]={};\r\n          }\r\n          if(result[orderedWords[i]][orderedWords[j]]==undefined){\r\n            result[orderedWords[i]][orderedWords[j]]=0;\r\n          }\r\n          result[orderedWords[i]][orderedWords[j]]+=1;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  console.log(result);\r\n\r\n  //let resultRange = context.workbook.worksheets.getActiveWorksheet().getRange(resultAddress);\r\n  resultRange=resultRange.getResizedRange(Object.keys(result).length-1,1);\r\n  //resultRange.select();\r\n  resultRange.values=[];\r\n  for(const key1 of Object.keys(result)){\r\n    let resultString = \"\";\r\n    console.log(key1, result[key1]);\r\n    for(const key2 of Object.keys(result[key1])){\r\n      resultString += key2+\" (\"+result[key1][key2]+\"); \";\r\n    }\r\n    resultRange.values.push([key1, resultString]);\r\n\r\n  }\r\n\r\n}\r\n\r\nString.prototype.count = function(search) {\r\n  var m = this.match(new RegExp(search.toString().replace(/(?=[.\\\\+*?[^\\]$(){}\\|])/g, \"\\\\\"), \"gi\"));\r\n  return m ? m.length:0;\r\n}\r\n\r\nasync function runCountTags(resultRange) {\r\n      const occurences = [];\r\n      for(const text of textArray){\r\n        const array = text.split(delimiter);\r\n        if(array.length==1 && array[0]==\"\"){\r\n          occurences.push(0);\r\n        }else{\r\n          const occurence = text.split(delimiter).length;\r\n          occurences.push(occurence);\r\n        }\r\n      }\r\n\r\n      console.log(occurences);\r\n\r\n      //let resultRange = context.workbook.worksheets.getActiveWorksheet().getRange(resultAddress);\r\n      resultRange=resultRange.getResizedRange(occurences.length-1,0);\r\n      //resultRange.select();\r\n      resultRange.values=[];\r\n      for(const occurence of occurences){\r\n        resultRange.values.push([occurence]);\r\n      }\r\n\r\n}\r\n\r\n\r\nasync function runCreateHistogram(resultRange) {\r\n      let maxTagCount=0;\r\n      const tagCounts = {};\r\n      for(const text of textArray){\r\n        const array = text.split(delimiter);\r\n        let tagCount=0;\r\n        if(array.length !=1 || array[0] != \"\"){\r\n          tagCount = text.split(delimiter).length;\r\n        }\r\n        if(tagCount>maxTagCount){\r\n          maxTagCount=tagCount;\r\n        }\r\n        if(tagCounts[tagCount+\"\"] == undefined){\r\n          tagCounts[tagCount+\"\"] = 0;\r\n        }\r\n        tagCounts[tagCount+\"\"] += 1;\r\n        \r\n      }\r\n\r\n      console.log(tagCounts);\r\n\r\n      //let resultRange = context.workbook.worksheets.getActiveWorksheet().getRange(resultAddress);\r\n      resultRange=resultRange.getResizedRange(maxTagCount,1);\r\n      //resultRange.select();\r\n      resultRange.values=[];\r\n      for(i=0;i<=maxTagCount;i++){\r\n        resultRange.values.push([i,tagCounts[i+\"\"]==undefined?0:tagCounts[i+\"\"]]);\r\n      }\r\n\r\n}\r\n\r\n\r\nasync function runCreateMatchHistogram(resultRange) {\r\n\r\n        const occurences = [];\r\n        for(const text of textArray){\r\n          let occurence = 0;\r\n          for(const word of wordArray){\r\n            occurence += text.count(word);//(text.match(new RegExp(word,\"gi\")) || []).length;\r\n          }\r\n          occurences.push(occurence);\r\n          //occurences.push(occurence);\r\n        }\r\n\r\n        console.log(occurences);\r\n\r\n        //let resultRange = context.workbook.worksheets.getActiveWorksheet().getRange(resultAddress);\r\n        resultRange=resultRange.getResizedRange(occurences.length,1);\r\n        //resultRange.select();\r\n        resultRange.values=[];\r\n        for(i=0;i<=occurences.length;i++){\r\n          resultRange.values.push([i+1,occurences[i]==undefined?0:occurences[i]]);\r\n        }\r\n        /*for(const occurence in occurences){\r\n          resultRange.values.push([occurence,occurences[occurence]]);\r\n        }*/\r\n\r\n\r\n}\r\n\r\n\r\n\r\nasync function runCountTriplets(resultRange){\r\n  const resultMap = new Map();\r\n  for(let i=0;i<wordArray.length-2;i++){\r\n    for(let j=i+1;j<wordArray.length-1;j++){\r\n      for(let k=j+1;k<wordArray.length;k++){\r\n        let occurences=0;\r\n        for(const text of textArray){\r\n          occurences += (text.includes(wordArray[i]) && text.includes(wordArray[j]) && text.includes(wordArray[k]));\r\n          continue;\r\n        }\r\n        if(occurences > 0){\r\n          resultMap.set(i+\"x\"+j+\"x\"+k,occurences);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  const ordered = new Map([...resultMap.entries()].sort((a, b) => b[1] - a[1]));\r\n\r\n  console.log(ordered);\r\n\r\n  resultRange=resultRange.getResizedRange(ordered.size-1,1);\r\n  resultRange.values=[];\r\n\r\n  for(const [triplet,count] of ordered){\r\n    const numbers = triplet.split(\"x\");\r\n    const word1 = wordArray[numbers[0]];\r\n    const word2 = wordArray[numbers[1]];\r\n    const word3 = wordArray[numbers[2]];\r\n\r\n    resultRange.values.push([word1+\"; \"+word2+\"; \"+word3, count]);\r\n\r\n  }\r\n\r\n}"],"names":["Office","onReady","info","host","HostType","Excel","document","getElementById","style","display","onclick","run","fillFromSelection","deleteOutput","load","wordCount","textCount","resultAddress","delimiter","wordArray","textArray","context","range","workbook","getSelectedRange","sync","value","values","console","error","targetId","address","getRange","parts","split","worksheet","cells","worksheets","getItem","getRangeById","id","processInputs","wordRange","top","getOffsetRange","rowIndex","innerText","getResizedRange","word","push","toString","toLowerCase","textRange","text","delimiterRange","clear","runButton","rootCell","activeCell","runSingleCounter","runPairsCounter","runCountTags","runCreateHistogram","runCreateMatchHistogram","runPairsCounter2","runCountTriplets","resultRange","ordered","occurences","Map","total","occurence","includes","set","log","entries","sort","a","b","size","sum","count","relativesum","i","length","j","undefined","key","Object","keys","parseInt","occurenceMap","orderedWords","result","key1","resultString","key2","array","maxTagCount","tagCounts","tagCount","resultMap","k","triplet","numbers","word1","word2","word3","String","prototype","search","m","this","match","RegExp","replace"],"sourceRoot":""}